import Foundation

/// Utility responsible for generating control and configuration messages
/// used in Attendi's asynchronous WebSocket-based transcription service.
///
/// These messages are encoded as JSON and exchanged with the backend to initiate,
/// control, and gracefully close live transcription sessions.
///
/// ## Usage
/// - Call [initialConfiguration] after opening a WebSocket to start a session.
/// - Call [close] to signal the end of an audio stream.
///
/// This abstraction simplifies message creation and ensures message format compliance.
enum AttendiAsyncTranscribeServiceMessages {

    /// Constructs a JSON message that configures a new transcription session.
    ///
    /// - Parameters:
    ///   - type: The message type. Defaults to "configuration".
    ///   - model: The transcription model to use (e.g., "ResidentialCare").
    ///   - reportId: Optional report identifier. A UUID is generated by default.
    ///   - isVoiceEditingEnabled: Whether voice editing is enabled.
    /// - Returns: A JSON string representing the configuration message.
    static func initialConfiguration(
        type: String = "configuration",
        model: String = "ResidentialCare",
        reportId: String = UUID().uuidString,
        isVoiceEditingEnabled: Bool = true
    ) -> String {
        let message = TranscribeAsyncMessageRequest(
            type: type,
            model: model,
            reportId: reportId,
            features: TranscribeAsyncAppSettingsRequest(
                voiceEditing: TranscribeAsyncVoiceEditingAppSettingsRequest(
                    isEnabled: isVoiceEditingEnabled
                )
            )
        )

        let encoder = JSONEncoder()
        encoder.outputFormatting = .withoutEscapingSlashes

        if let jsonData = try? encoder.encode(message),
           let jsonString = String(data: jsonData, encoding: .utf8) {
            return jsonString
        } else {
            return "{}"
        }
    }

    /// Returns a JSON message that signals the end of an audio stream.
    ///
    /// This should be sent when disconnecting the WebSocket to allow the backend
    /// to finalize and close the transcription session gracefully.
    ///
    /// - Returns: A JSON string: `{"type": "endOfAudioStream"}`
    static func close() -> String {
        return #"{"type": "endOfAudioStream"}"#
    }
}
